/*
 * $Id: ChannelList.c $
 *
 * This file is part of the CALM FAST Message Library.
 * 
 * Author: Andras Takacs <andras.takacs@ramsys.hu>
 *
 * Copyright 2006-2009 Ramsys Zrt
 *
 * CALM FAST Message Library is free software; you can redistribute
 * it and/or modify it under the terms of the GNU LEsser General Public
 * License as published by the Free Software Foundation; version 3 of
 * the License.
 *
 * CALM FAST Message Library is distributed in the hope that it will
 * be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with CALM FAST Message Library; if not, write to the Free
 * Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
 * 02111-1307 USA.
 */

/*
 * Generated by asn1c-0.9.22 (http://lionet.info/asn1c)
 * From ASN.1 module "CALMime"
 * 	found in "29281.asn"
 * 	`asn1c -fnative-types -fcompound-names -fskeletons-copy`
 */

#include <asn_internal.h>

#include "ChannelList.h"

static asn_per_constraints_t asn_PER_type_ChannelList_constr_1 = {
	{ APC_UNCONSTRAINED,	-1, -1,  0,  0 },
	{ APC_CONSTRAINED,	 8,  8,  0,  255 }	/* (SIZE(0..255)) */,
	0, 0	/* No PER value map */
};
static asn_TYPE_member_t asn_MBR_ChannelList_1[] = {
	{ ATF_POINTER, 0, 0,
		(ASN_TAG_CLASS_UNIVERSAL | (16 << 2)),
		0,
		&asn_DEF_ServiceChannel,
		0,	/* Defer constraints checking to the member type */
		0,	/* No PER visible constraints */
		0,
		""
		},
};
static ber_tlv_tag_t asn_DEF_ChannelList_tags_1[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (16 << 2))
};
static asn_SET_OF_specifics_t asn_SPC_ChannelList_specs_1 = {
	sizeof(struct ChannelList),
	offsetof(struct ChannelList, _asn_ctx),
	0,	/* XER encoding is XMLDelimitedItemList */
};
asn_TYPE_descriptor_t asn_DEF_ChannelList = {
	"ChannelList",
	"ChannelList",
	SEQUENCE_OF_free,
	SEQUENCE_OF_print,
	SEQUENCE_OF_constraint,
	SEQUENCE_OF_decode_ber,
	__LIBFAST__SEQUENCE_OF_encode_der,
	SEQUENCE_OF_decode_xer,
	__LIBFAST__SEQUENCE_OF_encode_xer,
	SEQUENCE_OF_decode_uper,
	__LIBFAST__SEQUENCE_OF_encode_uper,
	0,	/* Use generic outmost tag fetcher */
	asn_DEF_ChannelList_tags_1,
	sizeof(asn_DEF_ChannelList_tags_1)
		/sizeof(asn_DEF_ChannelList_tags_1[0]), /* 1 */
	asn_DEF_ChannelList_tags_1,	/* Same as above */
	sizeof(asn_DEF_ChannelList_tags_1)
		/sizeof(asn_DEF_ChannelList_tags_1[0]), /* 1 */
	&asn_PER_type_ChannelList_constr_1,
	asn_MBR_ChannelList_1,
	1,	/* Single element */
	&asn_SPC_ChannelList_specs_1	/* Additional specs */
};

