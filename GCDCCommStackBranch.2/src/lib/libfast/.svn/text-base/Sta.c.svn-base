/*
 * $Id: Sta.c $
 *
 * This file is part of the CALM FAST Message Library.
 * 
 * Author: Andras Takacs <andras.takacs@ramsys.hu>
 *
 * Copyright 2006-2009 Ramsys Zrt
 *
 * CALM FAST Message Library is free software; you can redistribute
 * it and/or modify it under the terms of the GNU LEsser General Public
 * License as published by the Free Software Foundation; version 3 of
 * the License.
 *
 * CALM FAST Message Library is distributed in the hope that it will
 * be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with CALM FAST Message Library; if not, write to the Free
 * Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
 * 02111-1307 USA.
 */

/*
 * Generated by asn1c-0.9.22 (http://lionet.info/asn1c)
 * From ASN.1 module "CALMime"
 * 	found in "29281.asn"
 * 	`asn1c -fnative-types -fcompound-names -fskeletons-copy`
 */

#include <asn_internal.h>

#include "Sta.h"

static int
__LIBFAST__memb_fill_constraint_1(asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	const BIT_STRING_t *st = (const BIT_STRING_t *)sptr;
	size_t size;
	
	if(!sptr) {
		_ASN_CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	if(st->size > 0) {
		/* Size in bits */
		size = 8 * st->size - (st->bits_unused & 0x07);
	} else {
		size = 0;
	}
	
	if((size == 5)) {
		/* Constraint check succeeded */
		return 0;
	} else {
		_ASN_CTFAIL(app_key, td, sptr,
			"%s: constraint failed (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
}

static asn_per_constraints_t asn_PER_memb_fill_constr_2 = {
	{ APC_UNCONSTRAINED,	-1, -1,  0,  0 },
	{ APC_CONSTRAINED,	 0,  0,  5,  5 }	/* (SIZE(5..5)) */,
	0, 0	/* No PER value map */
};
static asn_TYPE_member_t asn_MBR_Sta_1[] = {
	{ ATF_NOFLAGS, 0, offsetof(struct Sta, fill),
		(ASN_TAG_CLASS_CONTEXT | (0 << 2)),
		+1,	/* EXPLICIT tag at current level */
		&asn_DEF_BIT_STRING,
		__LIBFAST__memb_fill_constraint_1,
		&asn_PER_memb_fill_constr_2,
		0,
		"fill"
		},
	{ ATF_NOFLAGS, 0, offsetof(struct Sta, messageType),
		(ASN_TAG_CLASS_CONTEXT | (1 << 2)),
		+1,	/* EXPLICIT tag at current level */
		&asn_DEF_MessageType,
		0,	/* Defer constraints checking to the member type */
		0,	/* No PER visible constraints */
		0,
		"messageType"
		},
	{ ATF_NOFLAGS, 0, offsetof(struct Sta, serverID),
		(ASN_TAG_CLASS_CONTEXT | (2 << 2)),
		+1,	/* EXPLICIT tag at current level */
		&asn_DEF_StationID,
		0,	/* Defer constraints checking to the member type */
		0,	/* No PER visible constraints */
		0,
		"serverID"
		},
	{ ATF_POINTER, 4, offsetof(struct Sta, serviceList),
		(ASN_TAG_CLASS_CONTEXT | (3 << 2)),
		+1,	/* EXPLICIT tag at current level */
		&asn_DEF_ServiceList,
		0,	/* Defer constraints checking to the member type */
		0,	/* No PER visible constraints */
		0,
		"serviceList"
		},
	{ ATF_POINTER, 3, offsetof(struct Sta, channelList),
		(ASN_TAG_CLASS_CONTEXT | (4 << 2)),
		+1,	/* EXPLICIT tag at current level */
		&asn_DEF_ChannelList,
		0,	/* Defer constraints checking to the member type */
		0,	/* No PER visible constraints */
		0,
		"channelList"
		},
	{ ATF_POINTER, 2, offsetof(struct Sta, ipServList),
		(ASN_TAG_CLASS_CONTEXT | (5 << 2)),
		+1,	/* EXPLICIT tag at current level */
		&asn_DEF_IpServList,
		0,	/* Defer constraints checking to the member type */
		0,	/* No PER visible constraints */
		0,
		"ipServList"
		},
	{ ATF_POINTER, 1, offsetof(struct Sta, ipPrefixList),
		(ASN_TAG_CLASS_CONTEXT | (6 << 2)),
		+1,	/* EXPLICIT tag at current level */
		&asn_DEF_IpPrefixList,
		0,	/* Defer constraints checking to the member type */
		0,	/* No PER visible constraints */
		0,
		"ipPrefixList"
		},
};
static int asn_MAP_Sta_oms_1[] = { 3, 4, 5, 6 };
static ber_tlv_tag_t asn_DEF_Sta_tags_1[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (16 << 2))
};
static asn_TYPE_tag2member_t asn_MAP_Sta_tag2el_1[] = {
    { (ASN_TAG_CLASS_CONTEXT | (0 << 2)), 0, 0, 0 }, /* fill at 139 */
    { (ASN_TAG_CLASS_CONTEXT | (1 << 2)), 1, 0, 0 }, /* messageType at 140 */
    { (ASN_TAG_CLASS_CONTEXT | (2 << 2)), 2, 0, 0 }, /* serverID at 141 */
    { (ASN_TAG_CLASS_CONTEXT | (3 << 2)), 3, 0, 0 }, /* serviceList at 142 */
    { (ASN_TAG_CLASS_CONTEXT | (4 << 2)), 4, 0, 0 }, /* channelList at 143 */
    { (ASN_TAG_CLASS_CONTEXT | (5 << 2)), 5, 0, 0 }, /* ipServList at 144 */
    { (ASN_TAG_CLASS_CONTEXT | (6 << 2)), 6, 0, 0 } /* ipPrefixList at 145 */
};
static asn_SEQUENCE_specifics_t asn_SPC_Sta_specs_1 = {
	sizeof(struct Sta),
	offsetof(struct Sta, _asn_ctx),
	asn_MAP_Sta_tag2el_1,
	7,	/* Count of tags in the map */
	asn_MAP_Sta_oms_1,	/* Optional members */
	4, 0,	/* Root/Additions */
	-1,	/* Start extensions */
	-1	/* Stop extensions */
};
asn_TYPE_descriptor_t asn_DEF_Sta = {
	"Sta",
	"Sta",
	__LIBFAST__SEQUENCE_free,
	__LIBFAST__SEQUENCE_print,
	__LIBFAST__SEQUENCE_constraint,
	__LIBFAST__SEQUENCE_decode_ber,
	__LIBFAST__SEQUENCE_encode_der,
	__LIBFAST__SEQUENCE_decode_xer,
	__LIBFAST__SEQUENCE_encode_xer,
	__LIBFAST__SEQUENCE_decode_uper,
	__LIBFAST__SEQUENCE_encode_uper,
	0,	/* Use generic outmost tag fetcher */
	asn_DEF_Sta_tags_1,
	sizeof(asn_DEF_Sta_tags_1)
		/sizeof(asn_DEF_Sta_tags_1[0]), /* 1 */
	asn_DEF_Sta_tags_1,	/* Same as above */
	sizeof(asn_DEF_Sta_tags_1)
		/sizeof(asn_DEF_Sta_tags_1[0]), /* 1 */
	0,	/* No PER visible constraints */
	asn_MBR_Sta_1,
	7,	/* Elements count */
	&asn_SPC_Sta_specs_1	/* Additional specs */
};

