/*
 * Generated by asn1c-0.9.22 (http://lionet.info/asn1c)
 * From ASN.1 module "Interoperability"
 * 	found in "interoperability.asn"
 * 	`asn1c -fnative-types -fcompound-names`
 */

#include <asn_internal.h>

#include "IncompleteCovarianceMatrix.h"

static int
memb_ab_constraint_1(asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	long value;
	
	if(!sptr) {
		_ASN_CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	value = *(const long *)sptr;
	
	if((value >= 0 && value <= 255)) {
		/* Constraint check succeeded */
		return 0;
	} else {
		_ASN_CTFAIL(app_key, td, sptr,
			"%s: constraint failed (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
}

static int
memb_ac_constraint_1(asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	long value;
	
	if(!sptr) {
		_ASN_CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	value = *(const long *)sptr;
	
	if((value >= 0 && value <= 255)) {
		/* Constraint check succeeded */
		return 0;
	} else {
		_ASN_CTFAIL(app_key, td, sptr,
			"%s: constraint failed (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
}

static int
memb_ad_constraint_1(asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	long value;
	
	if(!sptr) {
		_ASN_CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	value = *(const long *)sptr;
	
	if((value >= 0 && value <= 255)) {
		/* Constraint check succeeded */
		return 0;
	} else {
		_ASN_CTFAIL(app_key, td, sptr,
			"%s: constraint failed (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
}

static int
memb_af_constraint_1(asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	long value;
	
	if(!sptr) {
		_ASN_CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	value = *(const long *)sptr;
	
	if((value >= 0 && value <= 255)) {
		/* Constraint check succeeded */
		return 0;
	} else {
		_ASN_CTFAIL(app_key, td, sptr,
			"%s: constraint failed (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
}

static int
memb_bc_constraint_1(asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	long value;
	
	if(!sptr) {
		_ASN_CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	value = *(const long *)sptr;
	
	if((value >= 0 && value <= 255)) {
		/* Constraint check succeeded */
		return 0;
	} else {
		_ASN_CTFAIL(app_key, td, sptr,
			"%s: constraint failed (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
}

static int
memb_bd_constraint_1(asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	long value;
	
	if(!sptr) {
		_ASN_CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	value = *(const long *)sptr;
	
	if((value >= 0 && value <= 255)) {
		/* Constraint check succeeded */
		return 0;
	} else {
		_ASN_CTFAIL(app_key, td, sptr,
			"%s: constraint failed (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
}

static int
memb_bf_constraint_1(asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	long value;
	
	if(!sptr) {
		_ASN_CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	value = *(const long *)sptr;
	
	if((value >= 0 && value <= 255)) {
		/* Constraint check succeeded */
		return 0;
	} else {
		_ASN_CTFAIL(app_key, td, sptr,
			"%s: constraint failed (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
}

static int
memb_cc_constraint_1(asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	long value;
	
	if(!sptr) {
		_ASN_CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	value = *(const long *)sptr;
	
	if((value >= 0 && value <= 255)) {
		/* Constraint check succeeded */
		return 0;
	} else {
		_ASN_CTFAIL(app_key, td, sptr,
			"%s: constraint failed (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
}

static int
memb_cd_constraint_1(asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	long value;
	
	if(!sptr) {
		_ASN_CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	value = *(const long *)sptr;
	
	if((value >= 0 && value <= 255)) {
		/* Constraint check succeeded */
		return 0;
	} else {
		_ASN_CTFAIL(app_key, td, sptr,
			"%s: constraint failed (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
}

static int
memb_cf_constraint_1(asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	long value;
	
	if(!sptr) {
		_ASN_CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	value = *(const long *)sptr;
	
	if((value >= 0 && value <= 255)) {
		/* Constraint check succeeded */
		return 0;
	} else {
		_ASN_CTFAIL(app_key, td, sptr,
			"%s: constraint failed (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
}

static int
memb_dd_constraint_1(asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	long value;
	
	if(!sptr) {
		_ASN_CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	value = *(const long *)sptr;
	
	if((value >= 0 && value <= 255)) {
		/* Constraint check succeeded */
		return 0;
	} else {
		_ASN_CTFAIL(app_key, td, sptr,
			"%s: constraint failed (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
}

static int
memb_df_constraint_1(asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	long value;
	
	if(!sptr) {
		_ASN_CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	value = *(const long *)sptr;
	
	if((value >= 0 && value <= 255)) {
		/* Constraint check succeeded */
		return 0;
	} else {
		_ASN_CTFAIL(app_key, td, sptr,
			"%s: constraint failed (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
}

static int
memb_ff_constraint_1(asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	long value;
	
	if(!sptr) {
		_ASN_CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	value = *(const long *)sptr;
	
	if((value >= 0 && value <= 255)) {
		/* Constraint check succeeded */
		return 0;
	} else {
		_ASN_CTFAIL(app_key, td, sptr,
			"%s: constraint failed (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
}

static asn_TYPE_member_t asn_MBR_IncompleteCovarianceMatrix_1[] = {
	{ ATF_NOFLAGS, 0, offsetof(struct IncompleteCovarianceMatrix, ab),
		(ASN_TAG_CLASS_UNIVERSAL | (2 << 2)),
		0,
		&asn_DEF_NativeInteger,
		memb_ab_constraint_1,
		0,	/* PER is not compiled, use -gen-PER */
		0,
		"ab"
		},
	{ ATF_NOFLAGS, 0, offsetof(struct IncompleteCovarianceMatrix, ac),
		(ASN_TAG_CLASS_UNIVERSAL | (2 << 2)),
		0,
		&asn_DEF_NativeInteger,
		memb_ac_constraint_1,
		0,	/* PER is not compiled, use -gen-PER */
		0,
		"ac"
		},
	{ ATF_NOFLAGS, 0, offsetof(struct IncompleteCovarianceMatrix, ad),
		(ASN_TAG_CLASS_UNIVERSAL | (2 << 2)),
		0,
		&asn_DEF_NativeInteger,
		memb_ad_constraint_1,
		0,	/* PER is not compiled, use -gen-PER */
		0,
		"ad"
		},
	{ ATF_NOFLAGS, 0, offsetof(struct IncompleteCovarianceMatrix, af),
		(ASN_TAG_CLASS_UNIVERSAL | (2 << 2)),
		0,
		&asn_DEF_NativeInteger,
		memb_af_constraint_1,
		0,	/* PER is not compiled, use -gen-PER */
		0,
		"af"
		},
	{ ATF_NOFLAGS, 0, offsetof(struct IncompleteCovarianceMatrix, bc),
		(ASN_TAG_CLASS_UNIVERSAL | (2 << 2)),
		0,
		&asn_DEF_NativeInteger,
		memb_bc_constraint_1,
		0,	/* PER is not compiled, use -gen-PER */
		0,
		"bc"
		},
	{ ATF_NOFLAGS, 0, offsetof(struct IncompleteCovarianceMatrix, bd),
		(ASN_TAG_CLASS_UNIVERSAL | (2 << 2)),
		0,
		&asn_DEF_NativeInteger,
		memb_bd_constraint_1,
		0,	/* PER is not compiled, use -gen-PER */
		0,
		"bd"
		},
	{ ATF_NOFLAGS, 0, offsetof(struct IncompleteCovarianceMatrix, bf),
		(ASN_TAG_CLASS_UNIVERSAL | (2 << 2)),
		0,
		&asn_DEF_NativeInteger,
		memb_bf_constraint_1,
		0,	/* PER is not compiled, use -gen-PER */
		0,
		"bf"
		},
	{ ATF_NOFLAGS, 0, offsetof(struct IncompleteCovarianceMatrix, cc),
		(ASN_TAG_CLASS_UNIVERSAL | (2 << 2)),
		0,
		&asn_DEF_NativeInteger,
		memb_cc_constraint_1,
		0,	/* PER is not compiled, use -gen-PER */
		0,
		"cc"
		},
	{ ATF_NOFLAGS, 0, offsetof(struct IncompleteCovarianceMatrix, cd),
		(ASN_TAG_CLASS_UNIVERSAL | (2 << 2)),
		0,
		&asn_DEF_NativeInteger,
		memb_cd_constraint_1,
		0,	/* PER is not compiled, use -gen-PER */
		0,
		"cd"
		},
	{ ATF_NOFLAGS, 0, offsetof(struct IncompleteCovarianceMatrix, cf),
		(ASN_TAG_CLASS_UNIVERSAL | (2 << 2)),
		0,
		&asn_DEF_NativeInteger,
		memb_cf_constraint_1,
		0,	/* PER is not compiled, use -gen-PER */
		0,
		"cf"
		},
	{ ATF_NOFLAGS, 0, offsetof(struct IncompleteCovarianceMatrix, dd),
		(ASN_TAG_CLASS_UNIVERSAL | (2 << 2)),
		0,
		&asn_DEF_NativeInteger,
		memb_dd_constraint_1,
		0,	/* PER is not compiled, use -gen-PER */
		0,
		"dd"
		},
	{ ATF_NOFLAGS, 0, offsetof(struct IncompleteCovarianceMatrix, df),
		(ASN_TAG_CLASS_UNIVERSAL | (2 << 2)),
		0,
		&asn_DEF_NativeInteger,
		memb_df_constraint_1,
		0,	/* PER is not compiled, use -gen-PER */
		0,
		"df"
		},
	{ ATF_NOFLAGS, 0, offsetof(struct IncompleteCovarianceMatrix, ff),
		(ASN_TAG_CLASS_UNIVERSAL | (2 << 2)),
		0,
		&asn_DEF_NativeInteger,
		memb_ff_constraint_1,
		0,	/* PER is not compiled, use -gen-PER */
		0,
		"ff"
		},
};
static ber_tlv_tag_t asn_DEF_IncompleteCovarianceMatrix_tags_1[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (16 << 2))
};
static asn_TYPE_tag2member_t asn_MAP_IncompleteCovarianceMatrix_tag2el_1[] = {
    { (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)), 0, 0, 12 }, /* ab at 89 */
    { (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)), 1, -1, 11 }, /* ac at 90 */
    { (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)), 2, -2, 10 }, /* ad at 91 */
    { (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)), 3, -3, 9 }, /* af at 92 */
    { (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)), 4, -4, 8 }, /* bc at 93 */
    { (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)), 5, -5, 7 }, /* bd at 94 */
    { (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)), 6, -6, 6 }, /* bf at 95 */
    { (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)), 7, -7, 5 }, /* cc at 96 */
    { (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)), 8, -8, 4 }, /* cd at 97 */
    { (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)), 9, -9, 3 }, /* cf at 98 */
    { (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)), 10, -10, 2 }, /* dd at 99 */
    { (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)), 11, -11, 1 }, /* df at 100 */
    { (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)), 12, -12, 0 } /* ff at 101 */
};
static asn_SEQUENCE_specifics_t asn_SPC_IncompleteCovarianceMatrix_specs_1 = {
	sizeof(struct IncompleteCovarianceMatrix),
	offsetof(struct IncompleteCovarianceMatrix, _asn_ctx),
	asn_MAP_IncompleteCovarianceMatrix_tag2el_1,
	13,	/* Count of tags in the map */
	0, 0, 0,	/* Optional elements (not needed) */
	-1,	/* Start extensions */
	-1	/* Stop extensions */
};
asn_TYPE_descriptor_t asn_DEF_IncompleteCovarianceMatrix = {
	"IncompleteCovarianceMatrix",
	"IncompleteCovarianceMatrix",
	SEQUENCE_free,
	SEQUENCE_print,
	SEQUENCE_constraint,
	SEQUENCE_decode_ber,
	SEQUENCE_encode_der,
	SEQUENCE_decode_xer,
	SEQUENCE_encode_xer,
	0, 0,	/* No PER support, use "-gen-PER" to enable */
	0,	/* Use generic outmost tag fetcher */
	asn_DEF_IncompleteCovarianceMatrix_tags_1,
	sizeof(asn_DEF_IncompleteCovarianceMatrix_tags_1)
		/sizeof(asn_DEF_IncompleteCovarianceMatrix_tags_1[0]), /* 1 */
	asn_DEF_IncompleteCovarianceMatrix_tags_1,	/* Same as above */
	sizeof(asn_DEF_IncompleteCovarianceMatrix_tags_1)
		/sizeof(asn_DEF_IncompleteCovarianceMatrix_tags_1[0]), /* 1 */
	0,	/* No PER visible constraints */
	asn_MBR_IncompleteCovarianceMatrix_1,
	13,	/* Elements count */
	&asn_SPC_IncompleteCovarianceMatrix_specs_1	/* Additional specs */
};

